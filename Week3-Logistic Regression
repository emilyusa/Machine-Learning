%--1--CostFuction.m%

% Initialize some useful values
m = length(y); % number of training examples

% You need to return the following variables correctly 
J = 0;
grad = zeros(size(theta));

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the cost of a particular choice of theta.
%               You should set J to the cost.
%               Compute the partial derivatives and set grad to the partial
%               derivatives of the cost w.r.t. each parameter in theta
%
% Note: grad should have the same dimensions as theta
%
temp=zeros(size(theta));
for(i=1:m)

  pX=X(i,:);
  py=y(i,:);
  
  J=-py*log(sigmoid(theta'*pX'))-(1-py)*log(1-sigmoid(theta'*pX'))+J;

  temp=temp+(sigmoid(theta'*pX')-py)*pX';
end
J=J/m;
grad=temp/m;
% =============================================================

end

%--2--CostFuctionReg%
function [J, grad] = costFunctionReg(theta, X, y, lambda)
%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization
%   J = COSTFUNCTIONREG(theta, X, y, lambda) computes the cost of using
%   theta as the parameter for regularized logistic regression and the
%   gradient of the cost w.r.t. to the parameters. 

% Initialize some useful values
m = length(y); % number of training examples

% You need to return the following variables correctly 
J = 0;
grad = zeros(size(theta));

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the cost of a particular choice of theta.
%               You should set J to the cost.
%               Compute the partial derivatives and set grad to the partial
%               derivatives of the cost w.r.t. each parameter in theta

tempJ=0;
Ones=ones(length(theta)-1);

thetaZero=zeros(length(theta));
thetaZero=thetaZero(:,1);
thetaJ=theta;
thetaJ(1,:)=[];
thetaOne=zeros(length(theta)-1);

for (i=1:m)
  pX=X(i,:);
  py=y(i,:);  
  %tempJ=lambda/(2*m)*Ones'*(theta.^2);

  J=J-py*log(sigmoid(theta'*pX'))-(1-py)*log(1-sigmoid(theta'*pX'));
    
  thetaZero=thetaZero+1/m*(sigmoid(theta'*pX')-py);
  qX=pX;
  qX(:,1)=[];

  thetaOne=thetaOne+1/m*(sigmoid(theta'*pX')-py)*qX'+tempJ;
  
end
  thetaTemp=theta;
  thetaTemp(1,:)=[];
  tempJ=(lambda/(2*m))*Ones(1,:)*(thetaTemp.^2);
  J=J/m+tempJ;
  
  thetaOne=thetaOne+lambda/m*thetaJ;
  grad= [thetaZero(1,1);thetaOne(:,1)];
 
% =============================================================

end

%--3--sigmoid.m%
function g = sigmoid(z)
%SIGMOID Compute sigmoid function
%   g = SIGMOID(z) computes the sigmoid of z.

% You need to return the following variables correctly 
g = zeros(size(z));

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the sigmoid of each value of z (z can be a matrix,
%               vector or scalar).

  g=1./(1+exp(-z)); //Note: Use ./ instead of /
% =============================================================

end
